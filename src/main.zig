
const std = @import("std");
const hpack = @import("hpack.zig");
const frame = @import("frame.zig");

const settings = @import("settings.zig");
const Flags = @import("Flags.zig");

pub fn main() !void {
   var gpa = std.heap.GeneralPurposeAllocator(.{}){};
   const alloc = gpa.allocator();
   defer _ = gpa.deinit();
   var buf: [1024 * 10]u8 = undefined;
   var s =  std.io.fixedBufferStream(buf[0..]);
   const framer = frame.init();
   var hdr =  hpack.Header.init(alloc);   
   defer hdr.deinit();
   var encoder_table = hpack.Table.init(alloc,hpack.DEFAULT_TABLE_SIZE);
   defer encoder_table.deinit();
   var decoder_table = hpack.Table.init(alloc,hpack.DEFAULT_TABLE_SIZE);
   defer decoder_table.deinit();
   for(0..50) |_| {
      try hpack.addHeader(alloc, &hdr, "x-test", "test");
      try hpack.addHeader(alloc, &hdr, "content-type", "text/html");
      try hpack.addHeader(alloc, &hdr, "content-length", "0");
      try hpack.addHeader(alloc, &hdr, "date", "Mon, 21 Oct 2013 20:13:21 GMT");
   }
   try framer.encodeSettings(s.writer().any(),false,settings.DefinedSettings{.enablePush = false},null);
   try framer.encodeSettings(s.writer().any(),true,null,null);
   try framer.encodeHeaders(alloc, s.writer().any(),1,false,hdr,&encoder_table,null,null);
   try framer.encodeData(s.writer().any(),1,"Hello World from Zig!",true,null);
   try framer.encodePing(s.writer().any(),0x12345678,false);
   try framer.encodePing(s.writer().any(),0x12345678,true);
   try framer.encodePriority(s.writer().any(),1,.{.stream_dependency = 1, .weight = 0, .exclusive = false});
   try framer.encodeWindowUpdate(s.writer().any(),1,0x1000);
   try framer.encodeWindowUpdate(s.writer().any(),frame.CONNECTION,0x1000);
   try framer.encodePushPromise(alloc,s.writer().any(),1,2,hdr,&encoder_table,null);
   try framer.encodeRstStream(s.writer().any(),1,0);
   try framer.encodeGoaway(s.writer().any(),1,0,null);
   s.reset();
   
   
   var d = try framer.decodeFrames(alloc,s.reader().any(),&decoder_table);
   defer d.deinit();
   try std.testing.expectEqual(d.header.stream_id,frame.CONNECTION);
   try std.testing.expectEqual(d.header.typ.typ,frame.H2FrameType.SETTINGS);
   try std.testing.expectEqual(d.header.flags,Flags.init());
   try std.testing.expectEqual(d.header.length,6);
   var d2 = try framer.decodeFrames(alloc,s.reader().any(),&decoder_table);
   defer d2.deinit();
   try std.testing.expectEqual(d2.header.stream_id,frame.CONNECTION);
   try std.testing.expectEqual(d2.header.typ.typ,frame.H2FrameType.SETTINGS);
   try std.testing.expectEqual(d2.header.flags,Flags.initValue(Flags.ACK));
   try std.testing.expectEqual(d2.header.length,0);   
   var h = try framer.decodeFrames(alloc,s.reader().any(),&decoder_table);
   defer h.deinit();
   try std.testing.expectEqual(h.header.stream_id,1);
   try std.testing.expectEqual(h.header.typ.typ,frame.H2FrameType.HEADERS);
   try std.testing.expectEqual(h.header.flags,Flags.initValue(Flags.END_HEADERS));
   const stdout = std.io.getStdOut().writer();
   try hpack.printHeader(stdout,h.payload.headers.header);
   try hpack.printHeader(stdout,hdr);
   try std.testing.expect(hpack.equalHeader(hdr,h.payload.headers.header));
   var b = try framer.decodeFrames(alloc,s.reader().any(),&decoder_table);
   defer b.deinit();
   try std.testing.expectEqual(b.header.stream_id,1);
   try std.testing.expectEqual(b.header.typ.typ,frame.H2FrameType.DATA);
   try std.testing.expectEqual(b.header.flags,Flags.initValue(Flags.END_STREAM));
   try std.testing.expectEqualStrings( b.payload.data.data.items, "Hello World from Zig!");
   var p = try framer.decodeFrames(alloc,s.reader().any(),&decoder_table);
   defer p.deinit();
   try std.testing.expectEqual(p.header.stream_id,frame.CONNECTION);
   try std.testing.expectEqual(p.header.typ.typ,frame.H2FrameType.PING);
   try std.testing.expectEqual(p.header.flags,Flags.init());
   try std.testing.expectEqual(p.payload.ping,0x12345678);
   var p2 = try framer.decodeFrames(alloc,s.reader().any(),&decoder_table);
   defer p2.deinit();
   try std.testing.expectEqual(p2.header.stream_id,frame.CONNECTION);
   try std.testing.expectEqual(p2.header.typ.typ,frame.H2FrameType.PING);
   try std.testing.expectEqual(p2.header.flags,Flags.initValue(Flags.ACK));
   try std.testing.expectEqual(p2.payload.ping,0x12345678);
   var pr = try framer.decodeFrames(alloc,s.reader().any(),&decoder_table);
   defer pr.deinit();
   try std.testing.expectEqual(pr.header.stream_id,1);
   try std.testing.expectEqual(pr.header.typ.typ,frame.H2FrameType.PRIORITY);
   try std.testing.expectEqual(pr.header.flags,Flags.init());
   try std.testing.expectEqual(pr.payload.priority.stream_dependency,1);
   try std.testing.expectEqual(pr.payload.priority.weight,0);
   try std.testing.expectEqual(pr.payload.priority.exclusive,false);
   var w = try framer.decodeFrames(alloc,s.reader().any(),&decoder_table);
   defer w.deinit();
   try std.testing.expectEqual(w.header.stream_id,1);
   try std.testing.expectEqual(w.header.typ.typ,frame.H2FrameType.WINDOW_UPDATE);
   try std.testing.expectEqual(w.header.flags,Flags.init());
   try std.testing.expectEqual(w.payload.window_update.increment,0x1000);
   var w2 = try framer.decodeFrames(alloc,s.reader().any(),&decoder_table);
   defer w2.deinit();
   try std.testing.expectEqual(w2.header.stream_id,frame.CONNECTION);
   try std.testing.expectEqual(w2.header.typ.typ,frame.H2FrameType.WINDOW_UPDATE);
   try std.testing.expectEqual(w2.header.flags,Flags.init());
   try std.testing.expectEqual(w2.payload.window_update.increment,0x1000);
   var c = try framer.decodeFrames(alloc,s.reader().any(),&decoder_table);
   defer c.deinit();
   try std.testing.expectEqual(c.header.stream_id,1);
   try std.testing.expectEqual(c.header.typ.typ,frame.H2FrameType.PUSH_PROMISE);
   try std.testing.expectEqual(c.header.flags,Flags.initValue(Flags.END_HEADERS));
   try std.testing.expectEqual(c.payload.push_promise.promised_stream_id,2);
   try std.testing.expect(hpack.equalHeader(hdr,c.payload.push_promise.header));
   var r = try framer.decodeFrames(alloc,s.reader().any(),&decoder_table);
   defer r.deinit();
   try std.testing.expectEqual(r.header.stream_id,1);
   try std.testing.expectEqual(r.header.typ.typ,frame.H2FrameType.RST_STREAM);
   try std.testing.expectEqual(r.header.flags,Flags.init());
   try std.testing.expectEqual(r.payload.rst_stream.error_code,0);
   var g = try framer.decodeFrames(alloc,s.reader().any(),&decoder_table);   
   defer g.deinit();   
   try std.testing.expectEqual(g.header.stream_id,frame.CONNECTION);
   try std.testing.expectEqual(g.header.typ.typ,frame.H2FrameType.GOAWAY);
   try std.testing.expectEqual(g.header.flags,Flags.init());
   try std.testing.expectEqual(g.payload.goaway.last_stream_id,1);
   try std.testing.expectEqual(g.payload.goaway.error_code,0);
   try std.testing.expectEqual(g.payload.goaway.debug_data.items.len,0);
}
